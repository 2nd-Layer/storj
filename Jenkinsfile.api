pipeline {
    agent {
        docker {
            label 'main'
            image docker.build("storj-ci", "--pull git://github.com/storj/ci.git#main").id
            args '-u root:root --cap-add SYS_PTRACE -v "/tmp/gomod":/go/pkg/mod -v "/tmp/npm":/npm --tmpfs "/tmp:exec,mode=777"'
        }
    }
    options {
          timeout(time: 36, unit: 'MINUTES')
    }
    environment {
        NPM_CONFIG_CACHE = '/npm/cache'
        GOTRACEBACK = 'all'
        COCKROACH_MEMPROF_INTERVAL=0
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sh 'mkdir -p .build'
                // make a backup of the mod file in case, for later linting
                sh 'cp go.mod .build/go.mod.orig'
                // download dependencies
                sh 'go mod download'
            }
        }
        stage('Build') {
            parallel {
                stage('go') {
                    steps {
                        sh 'go build -v ./...'
                    }
                }
                stage('go -race') {
                    steps {
                        sh 'go build -v -race ./...'

                        // install storj-sim
                        sh 'go install -race -v storj.io/storj/cmd/satellite '+
                                'storj.io/storj/cmd/storagenode ' +
                                'storj.io/storj/cmd/storj-sim ' +
                                'storj.io/storj/cmd/versioncontrol ' +
                                'storj.io/storj/cmd/uplink ' +
                                'storj.io/storj/cmd/identity ' +
                                'storj.io/storj/cmd/certificates ' +
                                'storj.io/storj/cmd/multinode'
                    }
                }
                stage('go -race gateway') {
                    steps {
                        // install gateway for storj-sim
                        sh 'go install -race -v storj.io/gateway@latest'
                    }
                }

                stage('db') {
                    steps {
                        sh 'service postgresql start'
                        dir('.build') {
                            sh 'cockroach start-single-node --insecure --store=type=mem,size=2GiB --listen-addr=localhost:26256 --http-addr=localhost:8086 --cache 512MiB --max-sql-memory 512MiB --background'
                            sh 'cockroach start-single-node --insecure --store=type=mem,size=2GiB --listen-addr=localhost:26257 --http-addr=localhost:8087 --cache 512MiB --max-sql-memory 512MiB --background'
                            sh 'cockroach start-single-node --insecure --store=type=mem,size=2GiB --listen-addr=localhost:26258 --http-addr=localhost:8088 --cache 512MiB --max-sql-memory 512MiB --background'
                            sh 'cockroach start-single-node --insecure --store=type=mem,size=2GiB --listen-addr=localhost:26259 --http-addr=localhost:8089 --cache 512MiB --max-sql-memory 512MiB --background'
                            sh 'cockroach start-single-node --insecure --store=type=mem,size=2GiB --listen-addr=localhost:26260 --http-addr=localhost:8090 --cache 256MiB --max-sql-memory 256MiB --background'
                        }
                    }
                }

                stage('web/satellite') {
                    steps {
                        dir('web/satellite') {
                            sh 'npm ci --prefer-offline --no-audit'
                            sh 'npm run build'
                        }
                    }
                }
                stage('web/storagenode') {
                    steps {
                        dir('web/storagenode') {
                            sh 'npm ci --prefer-offline --no-audit'
                            sh 'npm run build'
                        }
                    }
                }
                stage('web/multinode') {
                    steps {
                        dir('web/multinode') {
                            sh 'npm ci --prefer-offline --no-audit'
                            sh 'npm run build'
                        }
                    }
                }
            }
        stage('API Test'){
            environment {
                // use different hostname to avoid port conflicts
                STORJ_NETWORK_HOST4 = '127.0.0.2'
                STORJ_NETWORK_HOST6 = '127.0.0.2'
                SATELLITE_0_ADDR='localhost:10002'
                STORJ_SIM_POSTGRES = 'postgres://postgres@localhost/teststorj2?sslmode=disable'
                }
            steps {
                sh 'psql -U postgres -c \'create database teststorj2;\''
                sh 'make test-sim-api'
            }
        }
    }
    post {
         success {
             echo 'Win!!'
         }
         failure {
             echo 'Oh no :('
             slackSend color: 'danger', message: "@Antonio  UI tests build failed"
         }
        always {
            sh "chmod -R 777 ." // ensure Jenkins agent can delete the working directory
            deleteDir()
        }
    }
}