// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: notification.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
	drpc "storj.io/drpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LogLevel int32

const (
	LogLevel_INFO  LogLevel = 0
	LogLevel_WARN  LogLevel = 1
	LogLevel_ERROR LogLevel = 2
	LogLevel_DEBUG LogLevel = 3
)

var LogLevel_name = map[int32]string{
	0: "INFO",
	1: "WARN",
	2: "ERROR",
	3: "DEBUG",
}

var LogLevel_value = map[string]int32{
	"INFO":  0,
	"WARN":  1,
	"ERROR": 2,
	"DEBUG": 3,
}

func (x LogLevel) String() string {
	return proto.EnumName(LogLevel_name, int32(x))
}

func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{0}
}

type NotificationMessage struct {
	NodeId               NodeID   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3,customtype=NodeID" json:"node_id"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Loglevel             LogLevel `protobuf:"varint,3,opt,name=loglevel,proto3,enum=notification.LogLevel" json:"loglevel,omitempty"`
	Message              []byte   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotificationMessage) Reset()         { *m = NotificationMessage{} }
func (m *NotificationMessage) String() string { return proto.CompactTextString(m) }
func (*NotificationMessage) ProtoMessage()    {}
func (*NotificationMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{0}
}
func (m *NotificationMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationMessage.Unmarshal(m, b)
}
func (m *NotificationMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationMessage.Marshal(b, m, deterministic)
}
func (m *NotificationMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationMessage.Merge(m, src)
}
func (m *NotificationMessage) XXX_Size() int {
	return xxx_messageInfo_NotificationMessage.Size(m)
}
func (m *NotificationMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationMessage proto.InternalMessageInfo

func (m *NotificationMessage) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NotificationMessage) GetLoglevel() LogLevel {
	if m != nil {
		return m.Loglevel
	}
	return LogLevel_INFO
}

func (m *NotificationMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type NotificationResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotificationResponse) Reset()         { *m = NotificationResponse{} }
func (m *NotificationResponse) String() string { return proto.CompactTextString(m) }
func (*NotificationResponse) ProtoMessage()    {}
func (*NotificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{1}
}
func (m *NotificationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationResponse.Unmarshal(m, b)
}
func (m *NotificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationResponse.Marshal(b, m, deterministic)
}
func (m *NotificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationResponse.Merge(m, src)
}
func (m *NotificationResponse) XXX_Size() int {
	return xxx_messageInfo_NotificationResponse.Size(m)
}
func (m *NotificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("notification.LogLevel", LogLevel_name, LogLevel_value)
	proto.RegisterType((*NotificationMessage)(nil), "notification.NotificationMessage")
	proto.RegisterType((*NotificationResponse)(nil), "notification.NotificationResponse")
}

func init() { proto.RegisterFile("notification.proto", fileDescriptor_736a457d4a5efa07) }

var fileDescriptor_736a457d4a5efa07 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0xcb, 0x2f, 0xc9,
	0x4c, 0xcb, 0x4c, 0x4e, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x41, 0x16, 0x93, 0xe2, 0x4a, 0xcf, 0x4f, 0xcf, 0x87, 0xc8, 0x28, 0x2d, 0x63, 0xe4, 0x12, 0xf6,
	0x43, 0x92, 0xf4, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0x52, 0xe7, 0x62, 0xcf, 0xcb, 0x4f,
	0x49, 0x8d, 0xcf, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x71, 0xe2, 0x3b, 0x71, 0x4f, 0x9e,
	0xe1, 0xd6, 0x3d, 0x79, 0x36, 0xbf, 0xfc, 0x94, 0x54, 0x4f, 0x97, 0x20, 0x36, 0x90, 0xb4, 0x67,
	0x8a, 0x90, 0x04, 0x17, 0x7b, 0x62, 0x4a, 0x4a, 0x51, 0x6a, 0x71, 0xb1, 0x04, 0x93, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x8c, 0x2b, 0x64, 0xc4, 0xc5, 0x91, 0x93, 0x9f, 0x9e, 0x93, 0x5a, 0x96, 0x9a,
	0x23, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x67, 0x24, 0xa6, 0x87, 0xe2, 0x36, 0x9f, 0xfc, 0x74, 0x1f,
	0x90, 0x6c, 0x10, 0x5c, 0x1d, 0xc8, 0xb4, 0x5c, 0x88, 0x0b, 0x24, 0x58, 0x40, 0xd6, 0x06, 0xc1,
	0xb8, 0x4a, 0x62, 0x5c, 0x22, 0xc8, 0xee, 0x0c, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0xd5,
	0x32, 0xe1, 0xe2, 0x80, 0x99, 0x23, 0xc4, 0xc1, 0xc5, 0xe2, 0xe9, 0xe7, 0xe6, 0x2f, 0xc0, 0x00,
	0x62, 0x85, 0x3b, 0x06, 0xf9, 0x09, 0x30, 0x0a, 0x71, 0x72, 0xb1, 0xba, 0x06, 0x05, 0xf9, 0x07,
	0x09, 0x30, 0x81, 0x98, 0x2e, 0xae, 0x4e, 0xa1, 0xee, 0x02, 0xcc, 0x46, 0x39, 0x5c, 0x3c, 0xc8,
	0xa6, 0x09, 0xc5, 0x70, 0x09, 0x07, 0x14, 0xe5, 0x27, 0xa7, 0x16, 0x17, 0xa3, 0x08, 0x2b, 0xa2,
	0x3a, 0x18, 0x4b, 0x40, 0x49, 0x29, 0xe1, 0x56, 0x02, 0x73, 0xa3, 0x13, 0x4b, 0x14, 0x53, 0x41,
	0x52, 0x12, 0x1b, 0x38, 0xc4, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x11, 0xcf, 0xc6, 0x3b,
	0xa1, 0x01, 0x00, 0x00,
}

type DRPCNotificationClient interface {
	DRPCConn() drpc.Conn

	ProcessNotification(ctx context.Context, in *NotificationMessage) (*NotificationResponse, error)
}

type drpcNotificationClient struct {
	cc drpc.Conn
}

func NewDRPCNotificationClient(cc drpc.Conn) DRPCNotificationClient {
	return &drpcNotificationClient{cc}
}

func (c *drpcNotificationClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcNotificationClient) ProcessNotification(ctx context.Context, in *NotificationMessage) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.Notification/ProcessNotification", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCNotificationServer interface {
	ProcessNotification(context.Context, *NotificationMessage) (*NotificationResponse, error)
}

type DRPCNotificationDescription struct{}

func (DRPCNotificationDescription) NumMethods() int { return 1 }

func (DRPCNotificationDescription) Method(n int) (string, drpc.Handler, interface{}, bool) {
	switch n {
	case 0:
		return "/notification.Notification/ProcessNotification",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCNotificationServer).
					ProcessNotification(
						ctx,
						in1.(*NotificationMessage),
					)
			}, DRPCNotificationServer.ProcessNotification, true
	default:
		return "", nil, nil, false
	}
}

func DRPCRegisterNotification(srv drpc.Server, impl DRPCNotificationServer) {
	srv.Register(impl, DRPCNotificationDescription{})
}

type DRPCNotification_ProcessNotificationStream interface {
	drpc.Stream
	SendAndClose(*NotificationResponse) error
}

type drpcNotificationProcessNotificationStream struct {
	drpc.Stream
}

func (x *drpcNotificationProcessNotificationStream) SendAndClose(m *NotificationResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotificationClient is the client API for Notification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationClient interface {
	ProcessNotification(ctx context.Context, in *NotificationMessage, opts ...grpc.CallOption) (*NotificationResponse, error)
}

type notificationClient struct {
	cc *grpc.ClientConn
}

func NewNotificationClient(cc *grpc.ClientConn) NotificationClient {
	return &notificationClient{cc}
}

func (c *notificationClient) ProcessNotification(ctx context.Context, in *NotificationMessage, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.Notification/ProcessNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServer is the server API for Notification service.
type NotificationServer interface {
	ProcessNotification(context.Context, *NotificationMessage) (*NotificationResponse, error)
}

func RegisterNotificationServer(s *grpc.Server, srv NotificationServer) {
	s.RegisterService(&_Notification_serviceDesc, srv)
}

func _Notification_ProcessNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).ProcessNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.Notification/ProcessNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).ProcessNotification(ctx, req.(*NotificationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notification_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notification.Notification",
	HandlerType: (*NotificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessNotification",
			Handler:    _Notification_ProcessNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification.proto",
}
