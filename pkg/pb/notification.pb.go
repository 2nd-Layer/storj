// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: notification.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
	drpc "storj.io/drpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type NotificationType int32

const (
	NotificationType_AUDIT_RECORD  NotificationType = 0
	NotificationType_UPTIME_RECORD NotificationType = 1
	NotificationType_GRACEFUL_EXIT NotificationType = 2
	NotificationType_VETTED_NODE   NotificationType = 3
)

var NotificationType_name = map[int32]string{
	0: "AUDIT_RECORD",
	1: "UPTIME_RECORD",
	2: "GRACEFUL_EXIT",
	3: "VETTED_NODE",
}

var NotificationType_value = map[string]int32{
	"AUDIT_RECORD":  0,
	"UPTIME_RECORD": 1,
	"GRACEFUL_EXIT": 2,
	"VETTED_NODE":   3,
}

func (x NotificationType) String() string {
	return proto.EnumName(NotificationType_name, int32(x))
}

func (NotificationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{0}
}

type Notification struct {
	Message              []byte           `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Title                string           `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	NotificationType     NotificationType `protobuf:"varint,3,opt,name=notification_type,json=notificationType,proto3,enum=notification.NotificationType" json:"notification_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Notification) Reset()         { *m = Notification{} }
func (m *Notification) String() string { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()    {}
func (*Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{0}
}
func (m *Notification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Notification.Unmarshal(m, b)
}
func (m *Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Notification.Marshal(b, m, deterministic)
}
func (m *Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notification.Merge(m, src)
}
func (m *Notification) XXX_Size() int {
	return xxx_messageInfo_Notification.Size(m)
}
func (m *Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_Notification proto.InternalMessageInfo

func (m *Notification) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Notification) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Notification) GetNotificationType() NotificationType {
	if m != nil {
		return m.NotificationType
	}
	return NotificationType_AUDIT_RECORD
}

type ProcessNotificationsRequest struct {
	Notifications        []*Notification `protobuf:"bytes,1,rep,name=notifications,proto3" json:"notifications,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ProcessNotificationsRequest) Reset()         { *m = ProcessNotificationsRequest{} }
func (m *ProcessNotificationsRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessNotificationsRequest) ProtoMessage()    {}
func (*ProcessNotificationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{1}
}
func (m *ProcessNotificationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessNotificationsRequest.Unmarshal(m, b)
}
func (m *ProcessNotificationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessNotificationsRequest.Marshal(b, m, deterministic)
}
func (m *ProcessNotificationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessNotificationsRequest.Merge(m, src)
}
func (m *ProcessNotificationsRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessNotificationsRequest.Size(m)
}
func (m *ProcessNotificationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessNotificationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessNotificationsRequest proto.InternalMessageInfo

func (m *ProcessNotificationsRequest) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

type NotificationResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotificationResponse) Reset()         { *m = NotificationResponse{} }
func (m *NotificationResponse) String() string { return proto.CompactTextString(m) }
func (*NotificationResponse) ProtoMessage()    {}
func (*NotificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{2}
}
func (m *NotificationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationResponse.Unmarshal(m, b)
}
func (m *NotificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationResponse.Marshal(b, m, deterministic)
}
func (m *NotificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationResponse.Merge(m, src)
}
func (m *NotificationResponse) XXX_Size() int {
	return xxx_messageInfo_NotificationResponse.Size(m)
}
func (m *NotificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("notification.NotificationType", NotificationType_name, NotificationType_value)
	proto.RegisterType((*Notification)(nil), "notification.Notification")
	proto.RegisterType((*ProcessNotificationsRequest)(nil), "notification.ProcessNotificationsRequest")
	proto.RegisterType((*NotificationResponse)(nil), "notification.NotificationResponse")
}

func init() { proto.RegisterFile("notification.proto", fileDescriptor_736a457d4a5efa07) }

var fileDescriptor_736a457d4a5efa07 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xdf, 0x4a, 0xfb, 0x30,
	0x14, 0xc7, 0x7f, 0xd9, 0x7e, 0x2a, 0x9e, 0x75, 0x9a, 0x1d, 0x8b, 0x94, 0x09, 0x52, 0x7a, 0x55,
	0xbd, 0xd8, 0x45, 0x7d, 0x01, 0xe7, 0x1a, 0xa5, 0xa8, 0xdb, 0x08, 0xa9, 0x88, 0x5e, 0x94, 0x6d,
	0x44, 0x29, 0x68, 0x53, 0x97, 0x78, 0xb1, 0x67, 0xf0, 0xd9, 0x7c, 0x27, 0xf1, 0xcf, 0x20, 0x1d,
	0xb3, 0x78, 0x79, 0x3e, 0xed, 0x37, 0xdf, 0x7c, 0x0e, 0x01, 0x2c, 0x94, 0xc9, 0x1f, 0xf2, 0xd9,
	0xc4, 0xe4, 0xaa, 0xe8, 0x95, 0x73, 0x65, 0x14, 0x3a, 0x36, 0x0b, 0xde, 0x08, 0x38, 0x43, 0x0b,
	0xa0, 0x07, 0x5b, 0xcf, 0x52, 0xeb, 0xc9, 0xa3, 0xf4, 0x88, 0x4f, 0x42, 0x87, 0x2f, 0x47, 0x74,
	0x61, 0xc3, 0xe4, 0xe6, 0x49, 0x7a, 0x0d, 0x9f, 0x84, 0xdb, 0xfc, 0x7b, 0xc0, 0x4b, 0xe8, 0xd8,
	0x07, 0x66, 0x66, 0x51, 0x4a, 0xaf, 0xe9, 0x93, 0x70, 0x27, 0x3a, 0xec, 0x55, 0xea, 0xed, 0x1a,
	0xb1, 0x28, 0x25, 0xa7, 0xc5, 0x0a, 0x09, 0x32, 0x38, 0x18, 0xcf, 0xd5, 0x4c, 0x6a, 0x6d, 0xff,
	0xac, 0xb9, 0x7c, 0x79, 0x95, 0xda, 0xe0, 0x29, 0xb4, 0xed, 0x88, 0xf6, 0x88, 0xdf, 0x0c, 0x5b,
	0x51, 0xf7, 0xf7, 0x1e, 0x5e, 0x0d, 0x04, 0xfb, 0xe0, 0x56, 0x3e, 0x4b, 0x5d, 0xaa, 0x42, 0xcb,
	0xe3, 0x7b, 0xa0, 0xab, 0xd7, 0x43, 0x0a, 0x4e, 0x3f, 0x8d, 0x13, 0x91, 0x71, 0x36, 0x18, 0xf1,
	0x98, 0xfe, 0xc3, 0x0e, 0xb4, 0xd3, 0xb1, 0x48, 0xae, 0xd9, 0x12, 0x91, 0x4f, 0x74, 0xc1, 0xfb,
	0x03, 0x76, 0x9e, 0x5e, 0x65, 0xec, 0x36, 0x11, 0xb4, 0x81, 0xbb, 0xd0, 0xba, 0x61, 0x42, 0xb0,
	0x38, 0x1b, 0x8e, 0x62, 0x46, 0x9b, 0xd1, 0x3b, 0x81, 0x76, 0xc5, 0x07, 0x53, 0xd8, 0x5b, 0xe3,
	0x89, 0x35, 0x22, 0xdd, 0xa0, 0x46, 0xf2, 0xc7, 0x02, 0x25, 0xb8, 0xeb, 0xd6, 0x87, 0x47, 0xd5,
	0x6c, 0xcd, 0x8a, 0xff, 0x52, 0x73, 0xf6, 0xff, 0xae, 0x51, 0x4e, 0xa7, 0x9b, 0x5f, 0xcf, 0xe9,
	0xe4, 0x23, 0x00, 0x00, 0xff, 0xff, 0x98, 0xb1, 0x84, 0xf2, 0x64, 0x02, 0x00, 0x00,
}

type DRPCNotificationsClient interface {
	DRPCConn() drpc.Conn

	ProcessNotification(ctx context.Context, in *Notification) (*NotificationResponse, error)
	ProcessNotifications(ctx context.Context, in *ProcessNotificationsRequest) (*NotificationResponse, error)
}

type drpcNotificationsClient struct {
	cc drpc.Conn
}

func NewDRPCNotificationsClient(cc drpc.Conn) DRPCNotificationsClient {
	return &drpcNotificationsClient{cc}
}

func (c *drpcNotificationsClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcNotificationsClient) ProcessNotification(ctx context.Context, in *Notification) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.Notifications/ProcessNotification", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcNotificationsClient) ProcessNotifications(ctx context.Context, in *ProcessNotificationsRequest) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.Notifications/ProcessNotifications", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCNotificationsServer interface {
	ProcessNotification(context.Context, *Notification) (*NotificationResponse, error)
	ProcessNotifications(context.Context, *ProcessNotificationsRequest) (*NotificationResponse, error)
}

type DRPCNotificationsDescription struct{}

func (DRPCNotificationsDescription) NumMethods() int { return 2 }

func (DRPCNotificationsDescription) Method(n int) (string, drpc.Handler, interface{}, bool) {
	switch n {
	case 0:
		return "/notification.Notifications/ProcessNotification",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCNotificationsServer).
					ProcessNotification(
						ctx,
						in1.(*Notification),
					)
			}, DRPCNotificationsServer.ProcessNotification, true
	case 1:
		return "/notification.Notifications/ProcessNotifications",
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCNotificationsServer).
					ProcessNotifications(
						ctx,
						in1.(*ProcessNotificationsRequest),
					)
			}, DRPCNotificationsServer.ProcessNotifications, true
	default:
		return "", nil, nil, false
	}
}

func DRPCRegisterNotifications(srv drpc.Server, impl DRPCNotificationsServer) {
	srv.Register(impl, DRPCNotificationsDescription{})
}

type DRPCNotifications_ProcessNotificationStream interface {
	drpc.Stream
	SendAndClose(*NotificationResponse) error
}

type drpcNotificationsProcessNotificationStream struct {
	drpc.Stream
}

func (x *drpcNotificationsProcessNotificationStream) SendAndClose(m *NotificationResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCNotifications_ProcessNotificationsStream interface {
	drpc.Stream
	SendAndClose(*NotificationResponse) error
}

type drpcNotificationsProcessNotificationsStream struct {
	drpc.Stream
}

func (x *drpcNotificationsProcessNotificationsStream) SendAndClose(m *NotificationResponse) error {
	if err := x.MsgSend(m); err != nil {
		return err
	}
	return x.CloseSend()
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotificationsClient is the client API for Notifications service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationsClient interface {
	ProcessNotification(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*NotificationResponse, error)
	ProcessNotifications(ctx context.Context, in *ProcessNotificationsRequest, opts ...grpc.CallOption) (*NotificationResponse, error)
}

type notificationsClient struct {
	cc *grpc.ClientConn
}

func NewNotificationsClient(cc *grpc.ClientConn) NotificationsClient {
	return &notificationsClient{cc}
}

func (c *notificationsClient) ProcessNotification(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.Notifications/ProcessNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsClient) ProcessNotifications(ctx context.Context, in *ProcessNotificationsRequest, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.Notifications/ProcessNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationsServer is the server API for Notifications service.
type NotificationsServer interface {
	ProcessNotification(context.Context, *Notification) (*NotificationResponse, error)
	ProcessNotifications(context.Context, *ProcessNotificationsRequest) (*NotificationResponse, error)
}

func RegisterNotificationsServer(s *grpc.Server, srv NotificationsServer) {
	s.RegisterService(&_Notifications_serviceDesc, srv)
}

func _Notifications_ProcessNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).ProcessNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.Notifications/ProcessNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).ProcessNotification(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifications_ProcessNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).ProcessNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.Notifications/ProcessNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).ProcessNotifications(ctx, req.(*ProcessNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notifications_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notification.Notifications",
	HandlerType: (*NotificationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessNotification",
			Handler:    _Notifications_ProcessNotification_Handler,
		},
		{
			MethodName: "ProcessNotifications",
			Handler:    _Notifications_ProcessNotifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification.proto",
}
